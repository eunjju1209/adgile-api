# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

# workflow를 동작하게 하는 trigger 
# repository에 push 이벤트가 발생하 때마다 실행된다.
on:
  push:
    branches: [ "master" ]
#  pull_request:
#    branches: [ "master" ]

permissions:
  contents: read

# job은 사용자가 정한 플랫폼을 통해 step 이라는 일련으 과정을 실행할 수 있다.
# 여러 개의 job을 사용할 수 있으며, 여러 개의 job을 사용할 때는 서로 정보도 교환 가능하다.
# 그리고 각각 독립적으로 실행 할 수 있음
jobs:
  build:

    runs-on: ubuntu-latest

    # job 안에는 step 이라는 키워드가 온다. 
    # step은 shell script를 실행할 수도 있고, 누군가 만들어 놓은 action을 사용할 수 도 있다.
    steps:
    
    # github actions 해당 프로젝트를 리눅스 환경에 checkout을 하고나서 실행한다.
    # 실제로 로컬에서 소스를 다운받은것처럼 참고로 밑에 있는 action 은 누군가가 만들어놓은거 사용한다.
    # 만들어 놓은 action은 사용할 때에는 Uses 라는 키워드르 사용해야한다.
    # 1) 워크 플로우 실행 전 기본적으로 체크아웃 필요
    - uses: actions/checkout@v3
    
  
    # 2) jdk 11 버전 설치, 다른 JDK 버전을 사용한다며 수정 필요
      # with 라는 키워드로 action에 값을 전달할 수 있다.
      # version 값을 받을 수 있다. 
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      shell: bash
      
    # 3) Gradle 사용. arguments 를 붙이며 뒹 그대로 실행된다고 생각하며 됨
    # 이 워크플로우는 gradle clean build 르 수행함
    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        arguments: build
        
    - name: Make zip file
      run: zip -qq -r ./$GITHUB_SHA.zip .
      shell: bash
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
        
    - name: Upload to S3
      run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://github-cicd-bucket/$PROJECT_NAME/$GITHUB_SHA.zip
      
      # application-name = code-deploy application name
      
    - name: Code Deploy
      run: aws deploy create-deployment --application-name adgile-app --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name github-group
          --s3-location bucket=github-cicd-bucket,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip
